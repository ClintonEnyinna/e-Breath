#ifndef e_Interpolator
#define e_Interpolator
#define LIBRARY_VERSION	1.0

// The goal of the high-level interpolator is to calculate a position and angular velocity to provide
// a controlled volume of air to the patient in a set amount of time. 

// Note that because our device does not directly measure volume, the tidal volume (Volume) input of our 
// controller is specified as a percent of a full compression of the Ambu bag instead of Liters. 
// The percent (%) of bag compression from 0 ï¿½ 100% maps to the encoder pulses that correspond to 
// how far the fingers of the device move towards or away from each other and this determines the 
// volume of air delivered.

#define RESPIRATION_POINTS_LENGTH 1000

class RespirationCycleInterpolator
{
private:
	// Tidal Volume (TV): The total volume of air to be delivered to the patient. Expressed as a %
	double Volume = 90;

	// BPM: Breaths per minute, also called respiratory rate (RR). Typically varies between 8-30 BPM.
	double BPM = 12;

	//I/E Ratio (1:IE): The ratio of the duration of the inhale to the duration of the exhale. 
	// For example, a 1:3 ratio means that the exhale phase lasts three times longer than the inhale phase. 
	// Typically varies between 1:1 to 1:3, with a maximum of 1:4 currently being observed in COVID-19 patients.
	double IE = 3;

	// In addition to these three inputs, there are three measurable pressure parameters that must be taken into account
	//
	// Pip: Maximum pressure during inhale. We consider 40 cmH20 to be the upper pressure limit for safety. This also corresponds to the over-pressure release valve limit on some Ambu bags.
	// Pplat: The plateau pressure of the inhale. An important diagnostic number for clinicians.
	// PEEP: The residual pressure in the system after exhale. We do not directly control this value, but it is typically controlled manually via a PEEP valve on the Ambu Bag.

	// Period (T): The length of time (in milliseconds) of an inhale/exhale cycle.
	double T;

	// Tin: The length of time (in milliseconds) of the inspiratory phase.
	double Tin;

	// Tex: The length of time (in milliseconds) of the expiratory phase.
	double Tex;

	// Vin: The rotation rate of the inspiratory phase (in pulses/second).
	double Vin;

	// Th: The amount of time (in milliseconds) to hold the compression at the end of the inhale for plateau pressure.
	double Th = 0;

	// Ve: The velocity of the fingers in the expiratory phase in degrees / second
	double Vex;

	long elapsed_time = 0;
	float pos_at_time[RESPIRATION_POINTS_LENGTH] = { 0, 0.000953939, 0.002074396, 0.003206612, 0.004350625, 0.005506472, 0.006674189, 0.007853811, 0.009045372, 0.010248907, 0.011464446, 0.012692022, 0.013931666, 0.015183407, 0.016447274, 0.017723294, 0.019011495, 0.020311903, 0.021624542, 0.022949436, 0.024286609, 0.025636082, 0.026997877, 0.028372013, 0.02975851, 0.031157385, 0.032568656, 0.033992339, 0.035428449, 0.036876999, 0.038338004, 0.039811474, 0.041297422, 0.042795856, 0.044306786, 0.04583022, 0.047366165, 0.048914626, 0.050475609, 0.052049116, 0.053635151, 0.055233716, 0.056844811, 0.058468435, 0.060104588, 0.061753267, 0.063414467, 0.065088185, 0.066774415, 0.068473151, 0.070184383, 0.071908104, 0.073644304, 0.075392971, 0.077154094, 0.07892766, 0.080713654, 0.082512061, 0.084322866, 0.08614605, 0.087981596, 0.089829484, 0.091689694, 0.093562204, 0.095446992, 0.097344033, 0.099253304, 0.101174779, 0.103108431, 0.105054233, 0.107012154, 0.108982167, 0.110964239, 0.11295834, 0.114964435, 0.116982491, 0.119012474, 0.121054347, 0.123108072, 0.125173613, 0.12725093, 0.129339984, 0.131440732, 0.133553133, 0.135677145, 0.137812722, 0.13995982, 0.142118394, 0.144288395, 0.146469777, 0.14866249, 0.150866484, 0.153081709, 0.155308112, 0.157545642, 0.159794244, 0.162053864, 0.164324446, 0.166605934, 0.16889827, 0.171201397, 0.173515254, 0.175839782, 0.17817492, 0.180520605, 0.182876776, 0.185243367, 0.187620316, 0.190007555, 0.19240502, 0.194812643, 0.197230355, 0.199658089, 0.202095773, 0.204543339, 0.207000714, 0.209467826, 0.211944603, 0.21443097, 0.216926853, 0.219432177, 0.221946865, 0.224470841, 0.227004028, 0.229546345, 0.232097715, 0.234658058, 0.237227293, 0.239805338, 0.242392111, 0.24498753, 0.247591512, 0.250203971, 0.252824823, 0.255453982, 0.258091363, 0.260736879, 0.263390441, 0.266051961, 0.268721351, 0.271398522, 0.274083383, 0.276775843, 0.279475812, 0.282183197, 0.284897906, 0.287619845, 0.290348922, 0.293085041, 0.295828109, 0.29857803, 0.301334708, 0.304098046, 0.306867949, 0.309644318, 0.312427055, 0.315216063, 0.318011243, 0.320812494, 0.323619718, 0.326432814, 0.329251681, 0.332076219, 0.334906325, 0.337741898, 0.340582836, 0.343429035, 0.346280393, 0.349136806, 0.35199817, 0.35486438, 0.357735333, 0.360610923, 0.363491044, 0.366375592, 0.36926446, 0.372157542, 0.375054731, 0.377955921, 0.380861004, 0.383769873, 0.38668242, 0.389598538, 0.392518117, 0.39544105, 0.398367228, 0.401296543, 0.404228884, 0.407164143, 0.410102211, 0.413042977, 0.415986331, 0.418932165, 0.421880367, 0.424830828, 0.427783436, 0.430738082, 0.433694655, 0.436653043, 0.439613137, 0.442574824, 0.445537994, 0.448502536, 0.451468338, 0.45443529, 0.45740328, 0.460372195, 0.463341927, 0.466312361, 0.469283388, 0.472254896, 0.475226772, 0.478198907, 0.481171188, 0.484143504, 0.487115744, 0.490087795, 0.493059548, 0.496030891, 0.499001712, 0.5019719, 0.504941345, 0.507909936, 0.510877561, 0.51384411, 0.516809473, 0.519773539, 0.522736198, 0.525697339, 0.528656852, 0.531614628, 0.534570557, 0.537524528, 0.540476434, 0.543426164, 0.54637361, 0.549318662, 0.552261213, 0.555201153, 0.558138375, 0.56107277, 0.564004232, 0.566932651, 0.569857922, 0.572779937, 0.575698589, 0.578613773, 0.581525381, 0.584433308, 0.587337448, 0.590237697, 0.593133948, 0.596026098, 0.598914042, 0.601797676, 0.604676896, 0.607551599, 0.610421682, 0.613287042, 0.616147576, 0.619003183, 0.621853762, 0.62469921, 0.627539428, 0.630374314, 0.633203768, 0.636027691, 0.638845984, 0.641658547, 0.644465282, 0.647266091, 0.650060876, 0.652849541, 0.655631988, 0.658408121, 0.661177844, 0.663941062, 0.666697679, 0.669447602, 0.672190735, 0.674926986, 0.677656261, 0.680378468, 0.683093514, 0.685801308, 0.688501758, 0.691194774, 0.693880266, 0.696558144, 0.699228319, 0.701890701, 0.704545204, 0.707191739, 0.709830219, 0.712460558, 0.715082669, 0.717696467, 0.720301868, 0.722898786, 0.725487137, 0.72806684, 0.73063781, 0.733199965, 0.735753225, 0.738297507, 0.740832731, 0.743358818, 0.745875688, 0.748383262, 0.750881462, 0.75337021, 0.75584943, 0.758319045, 0.760778978, 0.763229156, 0.765669503, 0.768099945, 0.770520409, 0.772930822, 0.775331111, 0.777721206, 0.780101035, 0.782470527, 0.784829614, 0.787178225, 0.789516292, 0.791843748, 0.794160525, 0.796466557, 0.798761777, 0.80104612, 0.803319522, 0.805581918, 0.807833245, 0.81007344, 0.81230244, 0.814520185, 0.816726613, 0.818921665, 0.82110528, 0.823277399, 0.825437964, 0.827586919, 0.829724204, 0.831849765, 0.833963546, 0.83606549, 0.838155545, 0.840233656, 0.84229977, 0.844353835, 0.846395799, 0.84842561, 0.850443219, 0.852448576, 0.854441631, 0.856422336, 0.858390642, 0.860346504, 0.862289875, 0.864220707, 0.866138958, 0.868044581, 0.869937533, 0.871817771, 0.873685252, 0.875539934, 0.877381777, 0.879210739, 0.881026781, 0.882829863, 0.884619947, 0.886396996, 0.88816097, 0.889911835, 0.891649554, 0.893374092, 0.895085414, 0.896783486, 0.898468275, 0.900139749, 0.901797874, 0.90344262, 0.905073957, 0.906691853, 0.90829628, 0.909887209, 0.911464612, 0.913028461, 0.91457873, 0.916115391, 0.917638421, 0.919147793, 0.920643484, 0.92212547, 0.923593728, 0.925048236, 0.926488971, 0.927915914, 0.929329043, 0.930728338, 0.932113782, 0.933485354, 0.934843036, 0.936186813, 0.937516667, 0.938832582, 0.940134542, 0.941422533, 0.94269654, 0.943956551, 0.945202551, 0.946434529, 0.947652472, 0.948856371, 0.950046213, 0.95122199, 0.952383692, 0.953531309, 0.954664835, 0.95578426, 0.95688958, 0.957980786, 0.959057873, 0.960120837, 0.961169672, 0.962204374, 0.96322494, 0.964231367, 0.965223653, 0.966201796, 0.967165794, 0.968115648, 0.969051356, 0.96997292, 0.970880341, 0.97177362, 0.97265276, 0.973517763, 0.974368632, 0.975205371, 0.976027985, 0.976836479, 0.977630857, 0.978411127, 0.979177294, 0.979929365, 0.980667349, 0.981391252, 0.982101085, 0.982796855, 0.983478573, 0.984146248, 0.984799891, 0.985439515, 0.986065129, 0.986676746, 0.98727438, 0.987858042, 0.988427748, 0.98898351, 0.989525344, 0.990053264, 0.990567287, 0.991067428, 0.991553704, 0.992026132, 0.992484729, 0.992929513, 0.993360503, 0.993777718, 0.994181176, 0.994570898, 0.994946904, 0.995309215, 0.995657851, 0.995992834, 0.996314187, 0.996621931, 0.996916089, 0.997196685, 0.997463743, 0.997717285, 0.997957338, 0.998183926, 0.998397075, 0.998596809, 0.998783156, 0.998956141, 0.999115792, 0.999262137, 0.999395202, 0.999515016, 0.999621608, 0.999715007, 0.999795241, 0.999862341, 0.999916336, 0.999957257, 0.999985135, 1, 0.999995004, 0.999951077, 0.999868389, 0.999747113, 0.999587426, 0.999389507, 0.999153538, 0.998879706, 0.998568198, 0.998219206, 0.997832923, 0.997409546, 0.996949273, 0.996452308, 0.995918853, 0.995349117, 0.994743307, 0.994101637, 0.99342432, 0.992711571, 0.991963611, 0.991180659, 0.990362939, 0.989510676, 0.988624096, 0.987703429, 0.986748906, 0.985760759, 0.984739224, 0.983684536, 0.982596935, 0.981476661, 0.980323954, 0.979139059, 0.97792222, 0.976673683, 0.975393697, 0.97408251, 0.972740374, 0.97136754, 0.96996426, 0.968530791, 0.967067388, 0.965574306, 0.964051805, 0.962500142, 0.960919579, 0.959310376, 0.957672794, 0.956007097, 0.954313548, 0.952592412, 0.950843953, 0.949068437, 0.947266132, 0.945437303, 0.943582219, 0.941701148, 0.939794358, 0.93786212, 0.935904702, 0.933922375, 0.931915409, 0.929884075, 0.927828643, 0.925749386, 0.923646574, 0.921520478, 0.919371372, 0.917199527, 0.915005213, 0.912788705, 0.910550272, 0.908290188, 0.906008723, 0.90370615, 0.90138274, 0.899038764, 0.896674494, 0.8942902, 0.891886154, 0.889462624, 0.887019882, 0.884558196, 0.882077837, 0.879579073, 0.877062171, 0.874527401, 0.871975028, 0.869405321, 0.866818546, 0.864214967, 0.86159485, 0.85895846, 0.85630606, 0.853637913, 0.850954281, 0.848255426, 0.845541609, 0.84281309, 0.840070128, 0.83731298, 0.834541906, 0.831757161, 0.828959, 0.826147679, 0.823323452, 0.820486571, 0.817637289, 0.814775855, 0.81190252, 0.809017533, 0.806121141, 0.803213591, 0.800295128, 0.797365997, 0.794426442, 0.791476703, 0.788517023, 0.78554764, 0.782568794, 0.779580722, 0.77658366, 0.773577842, 0.770563503, 0.767540874, 0.764510187, 0.761471672, 0.758425556, 0.755372068, 0.752311432, 0.749243873, 0.746169614, 0.743088878, 0.740001883, 0.73690885, 0.733809995, 0.730705534, 0.727595683, 0.724480654, 0.72136066, 0.71823591, 0.715106614, 0.711972978, 0.708835209, 0.705693511, 0.702548088, 0.69939914, 0.696246867, 0.693091469, 0.689933141, 0.68677208, 0.683608479, 0.680442531, 0.677274425, 0.674104353, 0.670932501, 0.667759055, 0.6645842, 0.66140812, 0.658230995, 0.655053006, 0.651874331, 0.648695147, 0.645515629, 0.642335951, 0.639156284, 0.6359768, 0.632797667, 0.629619053, 0.626441123, 0.623264042, 0.620087972, 0.616913074, 0.613739508, 0.610567431, 0.607397, 0.60422837, 0.601061693, 0.597897122, 0.594734806, 0.591574894, 0.588417532, 0.585262866, 0.582111039, 0.578962194, 0.57581647, 0.572674008, 0.569534944, 0.566399415, 0.563267554, 0.560139495, 0.557015368, 0.553895303, 0.550779429, 0.547667872, 0.544560757, 0.541458207, 0.538360345, 0.535267291, 0.532179164, 0.529096081, 0.526018158, 0.522945511, 0.519878251, 0.51681649, 0.513760338, 0.510709904, 0.507665294, 0.504626614, 0.501593969, 0.49856746, 0.495547189, 0.492533256, 0.489525758, 0.486524793, 0.483530457, 0.480542842, 0.477562042, 0.474588147, 0.471621248, 0.468661433, 0.465708788, 0.4627634, 0.459825353, 0.456894728, 0.453971609, 0.451056075, 0.448148204, 0.445248075, 0.442355763, 0.439471343, 0.436594889, 0.433726472, 0.430866165, 0.428014035, 0.425170152, 0.422334582, 0.419507392, 0.416688646, 0.413878406, 0.411076736, 0.408283695, 0.405499344, 0.40272374, 0.399956941, 0.397199003, 0.39444998, 0.391709926, 0.388978893, 0.386256932, 0.383544094, 0.380840427, 0.378145979, 0.375460797, 0.372784926, 0.37011841, 0.367461293, 0.364813617, 0.362175422, 0.35954675, 0.356927638, 0.354318124, 0.351718246, 0.349128039, 0.346547538, 0.343976776, 0.341415786, 0.3388646, 0.336323249, 0.333791761, 0.331270165, 0.32875849, 0.326256762, 0.323765007, 0.321283249, 0.318811513, 0.31634982, 0.313898194, 0.311456656, 0.309025224, 0.30660392, 0.304192761, 0.301791764, 0.299400947, 0.297020325, 0.294649912, 0.292289724, 0.289939773, 0.287600072, 0.285270632, 0.282951464, 0.280642579, 0.278343984, 0.276055689, 0.273777701, 0.271510028, 0.269252674, 0.267005646, 0.264768948, 0.262542584, 0.260326557, 0.25812087, 0.255925523, 0.253740519, 0.251565857, 0.249401538, 0.247247559, 0.24510392, 0.242970618, 0.24084765, 0.238735012, 0.236632699, 0.234540708, 0.232459032, 0.230387666, 0.228326601, 0.226275832, 0.22423535, 0.222205146, 0.220185211, 0.218175536, 0.216176111, 0.214186924, 0.212207964, 0.21023922, 0.208280678, 0.206332327, 0.204394151, 0.202466139, 0.200548274, 0.198640543, 0.196742929, 0.194855417, 0.19297799, 0.191110632, 0.189253324, 0.18740605, 0.185568792, 0.18374153, 0.181924245, 0.180116918, 0.17831953, 0.176532059, 0.174754485, 0.172986786, 0.171228943, 0.169480931, 0.16774273, 0.166014317, 0.164295668, 0.16258676, 0.160887569, 0.159198072, 0.157518244, 0.155848061, 0.154187496, 0.152536526, 0.150895123, 0.149263263, 0.147640918, 0.146028063, 0.14442467, 0.142830712, 0.141246162, 0.139670992, 0.138105174, 0.136548679, 0.13500148, 0.133463547, 0.131934852, 0.130415365, 0.128905056, 0.127403897, 0.125911856, 0.124428904, 0.12295501, 0.121490145, 0.120034276, 0.118587374, 0.117149406, 0.115720341, 0.114300149, 0.112888797, 0.111486252, 0.110092484, 0.10870746, 0.107331147, 0.105963513, 0.104604525, 0.10325415, 0.101912356, 0.100579108, 0.099254374, 0.097938121, 0.096630314, 0.09533092, 0.094039905, 0.092757236, 0.091482878, 0.090216797, 0.088958959, 0.08770933, 0.086467875, 0.08523456, 0.084009349, 0.08279221, 0.081583105, 0.080382002, 0.079188864, 0.078003658, 0.076826347, 0.075656897, 0.074495273, 0.07334144, 0.072195361, 0.071057002, 0.069926328, 0.068803303, 0.067687892, 0.066580059, 0.065479768, 0.064386985, 0.063301673, 0.062223798, 0.061153323, 0.060090213, 0.059034432, 0.057985945, 0.056944716, 0.05591071, 0.05488389, 0.053864221, 0.052851668, 0.051846194, 0.050847765, 0.049856344, 0.048871896, 0.047894386, 0.046923778, 0.045960036, 0.045003124, 0.044053008, 0.043109652, 0.04217302, 0.041243078, 0.040319789, 0.039403118, 0.03849303, 0.03758949, 0.036692463, 0.035801913, 0.034917806, 0.034040106, 0.033168778, 0.032303787, 0.031445099, 0.030592678, 0.02974649, 0.028906501, 0.028072674, 0.027244977, 0.026423373, 0.02560783, 0.024798312, 0.023994785, 0.023197216, 0.022405568, 0.02161981, 0.020839906, 0.020065823, 0.019297526, 0.018534983, 0.017778159, 0.01702702, 0.016281534, 0.015541667, 0.014807385, 0.014078655, 0.013355445, 0.01263772, 0.011925448, 0.011218596, 0.010517132, 0.009821022, 0.009130234, 0.008444735, 0.007764494, 0.007089478, 0.006419654, 0.00575499, 0.005095455, 0.004441017, 0.003791644, 0.003147304, 0.002507965, 0.001873597, 0.001244167, 0.000619645 };

	// Queued parameters to be changed in the next cycle
	bool queuedParameters = false;
  bool peakReached = false;
  bool nearCycleComplete = false;
	double qVolume, qBPM, qIE;

	void CalcParameters();

  void (*cycleCompleteFn)(void);
  void (*cyclePeakFn)(void);
  void (*nearCycleCompleteFn)(void);


  
public:
	// Constructor without breathing parameters. Expects the parameters to be set at a later time
	RespirationCycleInterpolator();
	RespirationCycleInterpolator(double volume, double bpm, double ie);

	void SetRespirationParameters(double volume, double bpm, double ie);
	void QueueRespirationParameters(double volume, double bpm, double ie);

	//void GetInterpolationAt(long t, double &pos, double &vel);
	void GetInterpolationAt(long t, double& pos, double& vel, double &accel, double &jerk);

	void GetInterpolation(double& pos, double& vel);
	void GetInterpolation(double& pos, double& vel, double &accel);
  void GetInterpolation(double& pos, double& vel, double &accel, double &jerk);

	void IncrementTime(long t);
	void ResetTime(long t);
	void PrintRespirationParameters();

  void SetCycleCompleteFn(void (*function)(void)){
    this->cycleCompleteFn = function;
  }

  void SetPeakReachedFn(void (*function)(void)){
    this->cyclePeakFn = function;
  }

  void SetNearCycleCompleteFn(void (*function)(void)){
    this->nearCycleCompleteFn = function;
  }
};
#endif
